name: Format (PREP)

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: Issue number to process
        required: true
        type: number
      body_override:
        description: Optional raw text to format
        required: false
        type: string

permissions:
  contents: write
  issues: write

concurrency:
  group: style-${{ github.event.issue.number || inputs.issue_number }}-prep
  cancel-in-progress: false

jobs:
  run:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'style:prep')
    runs-on: ubuntu-latest
    env:
      MODEL: gpt-4o-mini
      ARTICLES_DIR: ${{ vars.ARTICLES_DIR || 'Writing' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve context
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let number, title, body;
            if (context.eventName === 'workflow_dispatch') {
              number = Number(core.getInput('issue_number'));
              const res = await github.rest.issues.get({ owner, repo, issue_number: number });
              title = res.data.title || `issue-${number}`;
              const override = core.getInput('body_override');
              body = override || res.data.body || '';
            } else {
              number = context.payload.issue.number;
              title = context.payload.issue.title || `issue-${number}`;
              body = context.payload.issue.body || '';
            }
            core.setOutput('owner', owner);
            core.setOutput('repo', repo);
            core.setOutput('number', String(number));
            core.setOutput('title', title);
            core.setOutput('body', body);

      - name: Format with PREP (OpenAI)
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL: ${{ env.MODEL }}
          INPUT_TEXT: ${{ steps.ctx.outputs.body }}
        run: |
          set -euo pipefail
          if [ -z "${OPENAI_API_KEY:-}" ]; then echo "Missing OPENAI_API_KEY" >&2; exit 1; fi
          read -r -d '' SYSTEM << 'SYS' || true
          あなたは日本語のテクニカルライターです。次の本文をPREP法（Point→Reason→Example→Point）で見出し付きのMarkdownに整形してください。冗長な前置きや指示文は出力しないでください。
          SYS
          read -r -d '' USER << 'USR' || true
          本文:
          ---
          ${INPUT_TEXT}
          USR
          BODY=$(jq -n --arg s "$SYSTEM" --arg u "$USER" '{
            model: env.MODEL,
            messages: [ {role:"system", content:$s}, {role:"user", content:$u} ],
            temperature: 0.4
          }')
          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" -d "$BODY")
          OUT=$(echo "$RESP" | jq -r '.choices[0].message.content // empty')
          if [ -z "$OUT" ]; then echo "$RESP" >&2; exit 1; fi
          echo "content<<EOF" >> "$GITHUB_OUTPUT"; echo "$OUT" >> "$GITHUB_OUTPUT"; echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Save to repository (Writing/)
        env:
          DIR: ${{ env.ARTICLES_DIR }}
          TITLE: ${{ steps.ctx.outputs.title }}
          NUM: ${{ steps.ctx.outputs.number }}
          CONTENT: ${{ steps.ai.outputs.content }}
        run: |
          set -euo pipefail
          slug() { echo "$1" | tr ' ' '-' | sed -E 's/[^A-Za-z0-9._-]+//g' | sed -E 's/^-+|-+$//g'; }
          base=$(slug "$TITLE"); if [ -z "$base" ]; then base="issue-${NUM}"; fi
          mkdir -p "$DIR"
          file="$DIR/${base}-prep.md"
          printf "%s\n\n%s\n" "# ${TITLE}（PREP版）" "$CONTENT" > "$file"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$file"
          git commit -m "docs: PREP formatted article for issue #$NUM" || echo "No changes to commit"
          git push

      - name: Comment link on issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: '${{ steps.ctx.outputs.owner }}',
              repo: '${{ steps.ctx.outputs.repo }}',
              issue_number: Number('${{ steps.ctx.outputs.number }}'),
              body: '📄 PREP版のMarkdownを保存しました（Writing/）。コミット履歴を参照してください。'
            });

